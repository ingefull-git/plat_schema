version: 2.1

executors:
  python-executor:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/repo

parameters:
  git_tag:
    type: string
    default: ""

jobs:
  check_for_failure:
    executor: python-executor
    parameters:
      version:
        type: string
        default: ""
      schema:
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Check Last Commit Message for Error Flag
          command: |
            LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
            if [[ "$LAST_COMMIT_MSG" == *"[ci error]"* ]]; then
              echo "Failing build due to ci error flag in commit message."
              exit 1
            fi

  take_snapshot:
    executor: python-executor
    parameters:
      version:
        type: string
        default: ""
      schema:
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Take Snapshot
          command: |
            mkdir -p snapshots/<< parameters.schema >>
            ./snapshot_schema.sh << parameters.schema >> snapshots/<< parameters.schema >>/snapshot.sql
            if [ -f snapshots/<< parameters.schema >>/snapshot.sql ]; then
              echo "Snapshot taken successfully."
              ls snapshots/<< parameters.schema >>
            else
              echo "Snapshot failed."
              exit 1
            fi
      - persist_to_workspace:
          root: snapshots
          paths:
            - << parameters.schema >>/snapshot.sql

  compare_schemas:
    executor: python-executor
    parameters:
      version:
        type: string
        default: ""
      schema:
        type: string
        default: ""
    steps:
      - checkout
      - attach_workspace:
          at: ./snapshots
      - run:
          name: Compare Schemas
          command: |
            mkdir -p diffs/<< parameters.schema >>
            echo "Current dir: $(pwd)"
            ls diffs/<< parameters.schema >>
            ls snapshots/<< parameters.schema >>
            if ./compare_schema.sh snapshots/<< parameters.schema >>/snapshot.sql backup/<< parameters.schema >>/snapshot.sql diffs/<< parameters.schema >>/schema_diff.sql; then
              echo "No differences found. Continuing deployment."
              rm -rf snapshots
              rm -rf diffs
              rm << parameters.schema >>/snapshot.sql
            else
              rm -rf snapshots
              ls
              echo "Differences found. Creating diff file and commit."
              ls diffs/<< parameters.schema >>
              GIT_USER_NAME=$(git config --get user.name || echo "rulo_ingefull")
              GIT_USER_EMAIL=$(git config --get user.email || echo "rsosa.ingefull@gmail.com")
              echo "Name: $GIT_USER_NAME"
              echo "Mail: $GIT_USER_EMAIL"
              git config --global user.name "$GIT_USER_NAME"
              git config --global user.email "$GIT_USER_EMAIL"
              git add .
              git commit -m "Found schema differences [ci error]"
              git push origin $(git rev-parse --abbrev-ref HEAD)
              exit 1
            fi

  deploy:
    executor: python-executor
    parameters:
      version:
        type: string
        default: ""
      schema:
        type: string
        default: ""
    steps:
      - checkout
      - setup_remote_docker:
          version: default
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            cd tool_deployer
            pip install -e .
      - run:
          name: Deploy schemas
          command: |
            . venv/bin/activate
            if tool_deployer -e caiso -a deploy -v "<< parameters.version >>" -st all -sch << parameters.schema >> 2>&1 | tee /dev/tty | grep -q 'ERROR'; then
              echo "Deployment failed with errors."
              exit 1
            else
              echo "Deployment succeeded."
            fi
      - run:
          name: Configure git
          command: |
            GIT_USER_NAME=$(git config --get user.name || echo "rulo_ingefull")
            GIT_USER_EMAIL=$(git config --get user.email || echo "rsosa.ingefull@gmail.com")
            echo "Name: $GIT_USER_NAME"
            echo "Mail: $GIT_USER_EMAIL"
            git config --global user.name "$GIT_USER_NAME"
            git config --global user.email "$GIT_USER_EMAIL"
      - run:
          name: Take Post-deployment Snapshot
          command: |
            ./snapshot_schema.sh << parameters.schema >> backup/<< parameters.schema >>/snapshot.sql
      - run:
          name: Commit schema changes
          command: |
            echo "Git status:"
            git add << parameters.schema >> backup/<< parameters.schema >>
            git status
            git commit -m "Updated plan files and schema snapshot [ci skip]"
            git push origin $(git rev-parse --abbrev-ref HEAD)


workflows:
  version: 2
  deploy_on_tag:
    jobs:
      - check_for_failure:
          schema: platform
          context: cicd
      - take_snapshot:
          requires:
            - check_for_failure
          schema: platform
          context: cicd
      - compare_schemas:
          requires:
            - take_snapshot
          schema: platform
          context: cicd
      - deploy:
          requires:
            - compare_schemas
          filters:
            tags:
              only: /^v.*/
          version: v0.1.1
          schema: platform
          context: cicd
